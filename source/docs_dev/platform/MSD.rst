Microservices Documentation (MSD)
Документация по микросервисам 

Микросервисы, V0.2
==================
Микросервисы платформы
----------------------
Платформ ПЕРЕСВЕТ построена на  микросервисах — наборе независимых и слабо связанных программных компонент, выполняющих сравнительно простые операции.     
Каждая сущность, присутствующая в иерархии, управляется своим сервисом. A каждый сервис — это набор из нескольких независимых микросервисов. В общем случае для каждой сущности создаётся четыре микросервиса:

	* API_CRUD

Сервис, реализующий API для команд CRUD (create-read-update-delete). Главная задача – валидация входных запросов средствами библиотеки Python Pydantic.

	* Model_CRUD

Сервис по управлению экземплярами сущности в иерархии.

	* App

Сервис, выполняющий основную функциональность сущности. Совокупность сервисов App – функциональное ядро платформы.

	* App_API

Сервис точек входа для API сущности, если сущность предоставляет какие-либо функции внешним клиентам.

.. figure:: pics/ms_01.png
    :align: center

Рисунок 1. Четыре группы микросервисов платформы

На Рисунке 1 “Четыре группы микросервисов платформы” показаны группы микросервисов, взаимодействующих через брокер сообщений RabbitMQ.
Сервисы API_CRUD и Model_CRUD – используются для управления экземплярами сущностей статической модели. Сервисы App и API – для обработки событий.
Разделение пар сервисов API_CRUD и Model_CRUD от App и API позволяет выделить работу по управлению экземплярами сущностей в отдельное приложение. Эта работа обычно выполняется только при создании модели технического объекта и очень редко в дальнейшем.
Разделение сервисов API_CRUD от Model_CRUD позволяет лучше управлять версионностью API.
Не обязательно для каждой сущности создавать все 4 сервиса. К примеру, сущность «dataStorage» (хранилище данных) имеет только три сервиса: dataStorages_API_CRUD, dataStorages_Model_CRUD и dataStorages_app, поскольку хранилище не предлагает никакой функциональности внешним клиентам.
Рассмотрим разделение функциональности между микросервисами:

1)	**<сущность>_api_crud** - микросервис, принимающий от пользователя или от любых внешних клиентов запросы на создание, чтение, обновление, удаление экземпляров сущности (команды CRUD).
Главная задача этого микросервиса - принять запрос и проверить корректность параметров запроса. В случае, если миросервис реализован на языке Python, для этой цели удобно пользоваться модулем pydantic.
Вторая задача - отправить соответствующий запрос микросервису <сущность>_model_crud.
Выделение описанной функциональности в отдельный микросервис облегчает управление версиями API, позволяя, в том числе, работать одновременно нескольким версиям.
Например, микросервис «alerts_API_CRUD» – функции, с помощью которых пользователь создаёт экземпляры тревог, привязывает их к тегам, описывает их параметры и т.д., то есть расширяет тревогами иерархическую модель объекта. Сервис выполняет две задачи: проверка корректности входных данных запроса от пользователя и создание сообщения для сервиса «alerts_Model_CRUD».

Сервис <сущность>_api_crud:	

Принимает сообщения:

1. <сущность>.client.create (RPC)
2. <сущность>.client.read.<id экземпляра сущности> (RPC)
3. <сущность>.client.update.<id экземпляра сущности>
4. <сущность>.client.delete.<id экземпляра сущности>
	
Публикует сообщения:

1. <сущность>.model.create (RPC)
2. <сущность>.model.read.<id экземпляра сущности> (RPC)
3. <сущность>.model.update.<id экземпляра сущности>
4. <сущность>.model.delete.<id экземпляра сущности>

.. figure:: pics/ms_02.png
    :align: center

Рисунок 2.  Микросервис tags_api_crud

Для реализации команды create сервис использует удаленное обращение   к сервису tags_model_crud по протоколу RPC, и ожидает идентификатор id вновь созданного тега.
2)	**<сущность>_model_crud** - микросервис, работающий с узлами сущности в иерархии. Именно этот сервис реализует непосредственную работу с иерархической моделью, взаимодействуя с LDAP-сервером. 
Например, микросервис «alerts_Model_CRUD» выполняет две задачи: выполняет ту функциональность, которую клиент запрашивает через «API (CRUD)» и создаёт сообщение для сервиса «App».  На эти сообщения могут быть подписаны и другие сервисы.

Сервис <сущность>_model_crud:	

Принимает сообщения:

1. <сущность>.model.create (RPC)
2. <сущность>.model.read.<id экземпляра сущности> (RPC)
3. <сущность>.model.update.<id экземпляра сущности>
4. <сущность>.model.delete.<id экземпляра сущности>

Публикует сообщения:

1. <сущность>.model.created.<id экземпляра сущности>
2. <сущность>.model.mayUpdate.<id экземпляра сущности> (RPC)
3. <сущность>.model.updating.<id экземпляра сущности> (RPC)
4. <сущность>.model.updated.<id экземпляра сущности>
5. <сущность>.model.mayDelete.<id экземпляра сущности> (RPC)
6. <сущность>.model.deleting.<id экземпляра сущности> (RPC)
7. <сущность>.model.deleted.<id экземпляра сущности>

Пример микросервиса «<сущность>_Model_CRUD» показан на рисунке Рисунок 5 «Микросервис tags_model_crud».

.. figure:: pics/ms_03.png
    :align: center

Рисунок 3: Микросервис  tags_model_crud

3)	**<сущность>_app** — микросервис определяет функциональность, ради которой создаются экземпляры сущности. Например, для тегов это, в первую очередь, функции записи/чтения данных. Для тревог — функциональность по инициации/квитированию/ /пропаданию тревог.  

.. figure:: pics/ms_04.png
    :align: center

Рисунок 4. Микросервис tags_app

В иерархической модели узлы определяют, как функционирует модель технического объекта. Микросервис «<сущность>_app» читает из иерархии описания узлов соответствующего типа и работает согласно этим описаниям. 
Например, микросервис «alerts_App», будучи подписан на события изменения тегов при установке квотирования тревоги “Превышение температуры”, управляет процессом возникновения / пропадания тревог.  

Сервис <сущность>_app:	

Принимает сообщения:

1.	<сущность>.model.mayUpdate.<id экземпляра сущности> (RPC)
2.	<сущность>.model.updating.<id экземпляра сущности> (RPC)
3.	<сущность>.model.updated.<id экземпляра сущности>
4.	<сущность>.model.mayDelete.<id экземпляра сущности> (RPC)
5.	<сущность>.model.deleting.<id экземпляра сущности> (RPC)

Принадлежность микросервиса «tags_app» сущности «tag показана на рисунке 4 «Микросервис tags_app».

4)	**<сущность>_app_api** — этот микросервис предоставляет клиентам доступ к функциональности сервиса «<сущность>_app». В случае тегов — это команды «data/set», 
«data/get». В случае тревог - команды квитирования, получения списка активных тревог. 
Сервис точек входа для доступа к функциональности сервиса «App». С помощью этого сервиса клиент может получить список активных тревог (другой способ – подписаться на сообщения), а также может квитировать тревогу.
Принадлежность микросервиса «tag_app_api» сущности «tag» показана на рисунке 5 «Микросервис tags_app_api».

.. figure:: pics/ms_05.png
    :align: center

Рисунок 5: Микросервис tags_app_api


Правила именования микросервисов
--------------------------------

Учитывая потенциально большое количество микросервисов для предотвращения ошибок их применения не в соответствии с их назначением, предложено стандартизировать их наименование. Имена главного файла микросервисов для каждой из четырех групп формируются в соответствии со следующими шаблонами:

	* API_CRUD: <сущность>_api_crud_svc.py
	* Model_CRUD: <сущность>_model_crud_svc.py
	* App: <сущность>_app_svc.py
	* App_API: <сущность>_app_api_svc.py

Файлы с конфигурациями для каждого сервиса имеют в именах вместо ключевого слова svc ключевое слово settings: <сущность>_api_crud_settings.py.

Базовые классы, от которых наследуются сервисы, содержатся в файлах без имени сущности: api_crud_svc.py.

 
